// Practical No: 07 - Using useRef Hook & useContext Hook

// =====================================================
// Q1) Auto-focus form field with useRef
// =====================================================

// Q1.js
import React, { useEffect, useRef } from 'react';

export default function Q1() {
  const inputRef = useRef();
  
  useEffect(() => {
    inputRef.current.focus();
    console.log('Username input focused');
  }, []);

  return (
    <div>
      <input type="text" placeholder="Enter Name..." ref={inputRef} />
      <input type="email" placeholder="Enter Email..." />
      <button type="submit">Submit</button>
    </div>
  );
}

// App.js
import React from "react";
import "./App.css";
import Q1 from "./Q1.js";

function App() {
  return (
    <div className="App">
      <Q1 />
    </div>
  );
}

export default App;

// =====================================================
// Q2) Form with useRef to store submitted data
// =====================================================

// Q2.js
import React, { useRef } from 'react';

export default function FormWithRef() {
  const usernameRef = useRef();
  const emailRef = useRef();
  
  const handleSubmit = () => {
    console.log(
      `Submitted Data: \nUsername: ${usernameRef.current.value}, Email: ${emailRef.current.value}`
    );
  };
  
  return (
    <div>
      <input type="text" placeholder="Enter Name..." ref={usernameRef} />
      <input type="email" placeholder="Enter Email..." ref={emailRef} />
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}

// App.js
import React from "react";
import "./App.css";
import Q2 from "./Q2.js";

function App() {
  return (
    <div className="App">
      <Q2 />
    </div>
  );
}

export default App;

// =====================================================
// Q3) Parent-child interaction with useImperativeHandle
// =====================================================

// Q3Parent.js
import React, { useRef } from 'react';
import Q3Child from './Q3Child';

const Q3Parent = () => {
  const childRef = useRef();
  
  const handleClick = () => {
    if (childRef.current) {
      childRef.current.showMessage();
    }
  };
  
  return (
    <div>
      <h1>Parent Component</h1>
      <button onClick={handleClick}>Call Child Function</button>
      <Q3Child ref={childRef} />
    </div>
  );
};

export default Q3Parent;

// Q3Child.js
import React, { forwardRef, useImperativeHandle } from 'react';

const Q3Child = forwardRef((props, ref) => {
  const showMessage = () => {
    console.log('Function called from child component!');
  };
  
  useImperativeHandle(ref, () => ({
    showMessage, // Expose the child method to the parent
  }));
  
  return <div>Sangram Ghorpade</div>;
});

export default Q3Child;

// App.js
import React from "react";
import "./App.css";
import Q3Parent from "./Q3Parent.js";

function App() {
  return (
    <div className="App">
      <Q3Parent />
    </div>
  );
}

export default App;

// =====================================================
// Q4) Shopping Cart with useContext
// =====================================================

// Q4.js
import React, { createContext, useState, useContext } from 'react';

const CartContext = createContext();

export function CartProvider() {
  const [cart, setCart] = useState([]);

  const addToCart = (item) => {
    setCart([...cart, item]);
  };

  const removeFromCart = (index) => {
    setCart(cart.filter((_, i) => i !== index));
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>
      <div className="app-container">
        <Cart />
        <ProductList />
      </div>
    </CartContext.Provider>
  );
}

function Cart() {
  const { cart, removeFromCart } = useContext(CartContext);

  return (
    <div className="cart">
      <h2>Shopping Cart</h2>
      {cart.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <ul>
          {cart.map((item, index) => (
            <li key={index}>
              {item.name} - Ruppes{item.price}
              <button onClick={() => removeFromCart(index)}>Remove</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

function ProductList() {
  const { addToCart } = useContext(CartContext);

  const products = [
    { id: 1, name: 'Smartwatch', price: 1500 },
    { id: 2, name: 'Smartphone', price: 25000 },
    { id: 3, name: 'Headphones', price: 1999 },
    { id: 4, name: 'Laptop', price: 45000 },
  ];

  return (
    <div className="product-list">
      <h2>Products</h2>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - Ruppes{product.price}
            <button onClick={() => addToCart(product)}>Add to Cart</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

// App.js
import React from "react";
import "./App.css";
import { CartProvider } from "./Q4.js";

function App() {
  return (
    <div className="app">
      <h1>Shopping Cart Example</h1>
      <CartProvider />
    </div>
  );
}

export default App;
